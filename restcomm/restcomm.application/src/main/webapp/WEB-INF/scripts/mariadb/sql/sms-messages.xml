<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
  @author thomas.quintana@telestax.com (Thomas Quintana)
-->
<mapper namespace="org.mobicents.servlet.sip.restcomm.dao.SmsMessagesDao">
  <insert id="addSmsMessage" parameterType="map">
    INSERT INTO restcomm_sms_messages (sid, date_created, date_updated, date_sent,
      account_sid, sender, recipient, body, status, direction,
		price, api_version, uri, status_callback, status_callback_method) VALUES (#{sid},
      #{date_created}, #{date_updated}, #{date_sent}, #{account_sid}, #{sender}, #{recipient}, #{body},
    #{status}, #{direction}, #{price}, #{api_version}, #{uri}, #{status_callback},
      #{status_callback_method});
  </insert>

  <select id="getSmsMessage" parameterType="string" resultType="hashmap">
    SELECT * FROM restcomm_sms_messages WHERE sid=#{sid};
  </select>

  <select id="getSmsMessages" parameterType="string" resultType="hashmap">
    SELECT * FROM restcomm_sms_messages WHERE account_sid=#{account_sid};
  </select>

  <select id="getSmsMessageBySmppMessageId" parameterType="string" resultType="hashmap">
    SELECT * FROM restcomm_sms_messages WHERE smpp_message_id=#{smpp_message_id};
  </select>

  <delete id="removeSmsMessage" parameterType="string">
    DELETE FROM restcomm_sms_messages WHERE sid=#{sid};
  </delete>

  <delete id="removeSmsMessages" parameterType="string">
    DELETE FROM restcomm_sms_messages WHERE account_sid=#{account_sid};
  </delete>

  <update id="updateSmsMessage" parameterType="map">
    UPDATE restcomm_sms_messages SET date_sent=#{date_sent}, status=#{status}, price=#{price}, smpp_message_id=#{smpp_message_id}, error_code=#{error_code}, date_updated=NOW() WHERE sid=#{sid};
  </update>

  <select id="getSmsMessagesPerAccountLastPerMinute" parameterType="map" resultType="int">
    SELECT COUNT(*) FROM restcomm_sms_messages WHERE account_sid=#{account_sid}
    AND direction IN ('outbound-api', 'outbound-call', 'outbound-reply')
    AND date_created &gt;= #{start_time};
  </select>

  <select id="getTotalSmsMessageByUsingFilters" parameterType="org.restcomm.connect.dao.entities.SmsMessageFilter" resultType="int">
            SELECT COUNT(*) FROM restcomm_sms_messages WHERE

            <!-- are we counting cdrs from a single account or from an account set -->
            <if test="accountSidSet == null">
                    account_sid=#{accountSid}
            </if>
            <if test="accountSidSet != null">
                    <if test="!accountSidSet.isEmpty()">
                            account_sid IN
                            <foreach item="item" index="index" collection="accountSidSet" open="(" separator="," close=")">
                                    #{item}
                            </foreach>
                    </if>
                    <if test="accountSidSet.isEmpty()">
                            account_sid=''
                    </if>
            </if>

            <if test="instanceid != null">
                    AND instanceid like #{instanceid}
            </if>
            <if test="recipient != null">
                    AND recipient like #{recipient}
            </if>
            <if test="sender != null">
                    AND sender like #{sender}
            </if>
            <if test="body != null">
                    AND body like #{body}
            </if>
            <!-- select * from "restcomm_sms_messages" where "start_time" >= '2013-08-23' order by "start_time" ; -->
            <if test="startTime != null">
                    AND date_created &gt;= #{startTime}
            </if>
            <if test="endTime != null">
                    AND date_created &lt;= DATE_ADD(#{endTime},INTERVAL 1 DAY)
            </if>

    </select>

    <select id="getSmsMessagesByUsingFilters" parameterType="org.restcomm.connect.dao.entities.SmsMessageFilter" resultType="hashmap">
            SELECT * FROM restcomm_sms_messages AS restcomm_sms_messages WHERE

            <!-- are we retrieving cdrs from a single account or from an account set -->
            <if test="accountSidSet == null">
                    account_sid=#{accountSid}
            </if>
            <if test="accountSidSet != null">
                    <if test="!accountSidSet.isEmpty()">
                            account_sid IN
                            <foreach item="item" index="index" collection="accountSidSet" open="(" separator="," close=")">
                                    #{item}
                            </foreach>
                    </if>
                    <if test="accountSidSet.isEmpty()">
                            account_sid=''
                    </if>
            </if>

            <if test="instanceid != null">
                    AND instanceid like #{instanceid}
            </if>
            <if test="recipient != null">
                    AND recipient like #{recipient}
            </if>
            <if test="sender != null">
                    AND sender like #{sender}
            </if>
            <if test="status != null">
                    AND status like #{status}
            </if>
            <if test="body != null">
                    AND body like #{body}
            </if>
            <!-- select * from "restcomm_sms_messages" where "start_time" >= '2013-08-23' order by "start_time" ; -->
            <if test="startTime != null">
                AND date_created &gt;= #{startTime}
            </if>
            <if test="endTime != null">
                AND date_created &lt;= DATE_ADD(#{endTime},INTERVAL 1 DAY)
            </if>
            <choose>
                <when test="sortByDate != null">
                    <if test="sortByDate.name() == 'ASCENDING'">
                        order by date_created ASC
                    </if>
                    <if test="sortByDate.name() == 'DESCENDING'">
                        order by date_created DESC
                    </if>
                </when>
                <when test="sortByFrom != null">
                    <if test="sortByFrom.name() == 'ASCENDING'">
                        order by sender ASC
                    </if>
                    <if test="sortByFrom.name() == 'DESCENDING'">
                        order by sender DESC
                    </if>
                </when>
                <when test="sortByTo != null">
                    <if test="sortByTo.name() == 'ASCENDING'">
                        order by recipient ASC
                    </if>
                    <if test="sortByTo.name() == 'DESCENDING'">
                        order by recipient DESC
                    </if>
                </when>
                <when test="sortByDirection != null">
                    <if test="sortByDirection.name() == 'ASCENDING'">
                        order by direction ASC
                    </if>
                    <if test="sortByDirection.name() == 'DESCENDING'">
                        order by direction DESC
                    </if>
                </when>
                <when test="sortByStatus != null">
                    <if test="sortByStatus.name() == 'ASCENDING'">
                        order by status ASC
                    </if>
                    <if test="sortByStatus.name() == 'DESCENDING'">
                        order by status DESC
                    </if>
                </when>
                <when test="sortByBody != null">
                    <if test="sortByBody.name() == 'ASCENDING'">
                        order by body ASC
                    </if>
                    <if test="sortByBody.name() == 'DESCENDING'">
                        order by body DESC
                    </if>
                </when>
                <when test="sortByPrice != null">
                    <if test="sortByPrice.name() == 'ASCENDING'">
                        order by cast(price as unsigned) ASC
                    </if>
                    <if test="sortByPrice.name() == 'DESCENDING'">
                        order by cast(price as unsigned) DESC
                    </if>
                </when>
                <otherwise>
                    order by date_created DESC
                </otherwise>
            </choose>
            <if test="limit != null and offset != null">
                LIMIT #{limit} OFFSET #{offset}
            </if>
    </select>

    <select id="findBySmppMessageId" parameterType="map" resultType="hashmap">
        SELECT * FROM restcomm_sms_messages AS restcomm_sms_messages
        WHERE smpp_message_id = #{smppMessageId}
    </select>
</mapper>
